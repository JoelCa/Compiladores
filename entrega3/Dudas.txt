Dudas resueltas del 2014.

En el diagrama:
		|    argn    |	fp+4*(n+1)
		|    ...     |
		|    arg2    |	fp+16
		|    arg1    |	fp+12
		|	 fp level  |  fp+8
		|  retorno   |	fp+4
		|   fp ant   |	fp
		--------------	fp
		|   local1   |	fp-4
		|   local2   |	fp-8
		|    ...     |
		|   localn   |	fp-4*n

1) el "fp level", es el SL? Si, El SL es el frame de la función que le corresponde a la llamada (la que
la anida). El fp ant. es el fp de la función que hace el call.

Definición de SL:
El SL de la función g es el FP de la función f, siendo f la que define a g, es decir
   let f() =
       let g()= ...
Notar que la función anidante (función donde se define la función llamada) no necesariamente es igual que la función llamante (función donde se llama a la función llamada)

2) el fp se refiere al frame actual? Sí.
3) que es local? las var. locales.

4) Cuando se crea un nuevo nivel? Cuando se declara una funcion.
5) El código intermedio de una declaración de variable, equivale a la asignación de la var. recien creada, con su valor inicial? Si.

7) En la declaración de una función, tengo que usar el código intermedio del body
de cada función? Si.


--------------------------------------------------------------------------------
Dudas 2016

- En la entrega1 _tigermain tiene el resultado de tipo TInt, mientras que la entrega2 _tigermain tiene el de resultado de tipo TUnit, así esta bien?
  Si está bien, ¿Cómo se probaría la segunda entrega si los tipos de los tests están como para que funcionen con TInt?

- ¿Cual es la sugerencia de Guillermo para modificar el tigerframe?

- ¿Para qué la canonización elimina los ESEQ?


----- Para preguntar en clase ------

- ¿Cómo se usa el intérprete que está en tigerinterp.sml?. Resuelto.

- Una vez terminado el maximal munch ¿Cuáles son los pasos a seguir?. Preguntado.

- Te escribo por estoy avanzando con el compilador junto con Joel Catacora y nos surgió una duda respecto a la arquitectura destino. Estamos entre 2
  opciones:
  - ARM
  - i386
  Queremos saber qué "problemas" puede presentarnos ARM, que no están, o son más simples, en i386? Preguntado.

- En el maximal munch de un jump "simple", ¿siempre tenemos un label como expresión?.

--------------------------------------------------------------------------------
Dudas RESUELTAS 2017

- En la variable "datosGlobs", cuando se agrega el PROC de una función f, asociamos como frame de f, 
  el frame que viene del level, el cual se crea con el nombre de f más un prefijo formado por una string obtenida de tigertemp.newLabel(). ¿Está bien?.
  El prefijo nos estorba para usar el intérprete, debido a que busca el frame por el nombre de las funciones sin tener en cuenta el prefijo ¿como lo solucionamos, si mantenemos este prefijo?.

- En el código intermedio del CALL f, ¿deberíamos incluir MOVEs de los valores con los que se llama f, a los registros o
  direcciones de memoria, que genera allocArg(), en la declaración de f?. El interpete lo hace solo, si incluimos la función
  "formals" y hacemos MOVEs en el preambulo de la función, en procEntryExit1.

- ¿Qué pasa cuando no esté el intérprete?. ¿El trabajo lo hace la instrucción CALL de ARM?. -----> NO

- ¿Como es la estructura del frame de ARM Cortex-A8?. ¿Utilizamos un registro especial para el static link, o lo mantenemos en memoria?. -----> EN MEMORIA

- En ARM, ¿La dirección de retorno se guarda en el registro lr?. -----> Si se implementa con BL, SI

- ¿Por qué es necesario guardar en un registro el valor de retorno (RV) luego del CALL? Ésto lo vimos del código de Felipe. -----> Respondida por Guillermo


Dudas resueltas por Guillermo
-----------------------------

- ¿Es correcto utilizar push para poner los argumentos de la función llamada en memoria?

- Cuando se hace la selección de instrucciones del CALL, el libro recomienda hacer una función auxiliar munchArgs, que genere el código encargado de
  mover los argumentos a donde correspondan (registro, o memoria). 
  Sabemos que del quinto argumento, en adelante, los argumentos van a memoria, ¿esto lo hacemos mediante PUSHs?.
  Luego de la instrucción BL (asociada al CALL), ¿deberían estar los POPs correspodientes?

  Codigo intermedio:
  CALL (f, a0,a1,a2,a3,a4,a5) 

  Código ARM:
  ..
  (movimientos de los argumentos a los registros r0-r3)
  PUSH {a4, a5}
  BL f
  POP {a4, a5}
  ..

- En procEntryExit1 agregamos como preludio y epilogo al cuerpo de la función, el código intermedio correspondiente a guardar y restaurar los registros callee saves.
Esto lo hicimos con MOVEs a temporarios frescos.
Ejemplo: 
Si r4 y r5 son todos los callee saves, entonces nos queda un código intermedio de la forma
PROLOGO @ BODY @ EPILOGO
Donde, PROLOGO contiene: MOVE(t0, r4) ; MOVE(t1, r5)
EPILOGO contiene: MOVE(r4, t0); MOVE (r5, t1)

Así está bien?.
O deberiamos implementarlo con instrucciones que los guarden a memoria (haciendo pushs o pops de "alto nivel")?


- Implementamos el munch del CALL, mas o menos así:
munchStm (CALL (NAME f) xs) = 
  emit (A.OPER { assem = "bl " ^ f ^ "\n",
                 src = muchArgs,
                 dst = calldefs,
                 jump = SOME [f]}) 
  ; makePops(temporaries)
Donde "makePops" hace los emits de las operaciones correspondientes a la instrucción pop,
según la lista de temporarios a los que se les hizo push.

¿Así esta bien?. Solo pudimos agregar los pops de esta forma.

Como esta forma no nos convencia. 
Pensamos que quizas habría una forma de patear el problema de generar el código de los pushs y pop
de los argumentos que van a memoria, para más adelante, en el coloreo (como se hace con los MOVEs a
temporarios frescos de los registros calle saves, en procEntryExit1).

- Si r5 y LR con todos los registros calle saves, ¿podemos usar cualquiera de estas dos formas
para retornar a la próxima intrucción de la función llamante?.

  ...
  BL function1
  ...


function1 (Opción 1)
  PUSH  {R5,LR}
  ...
  POP {R5,PC}

function1 (Opción 2)
  PUSH  {R5,LR}
  ...
  POP {R5,LR}
  BX  LR

- ¿Tenemos que hacer una arista "de vuelta", entre el último nodo del flujo del body de una función f y el nodo sucesor del nodo que representa
  al call f?.
  Si es necesario, ¿como podemos hacerla?.

- ¿Es necesario hacer un nodo para cada una de las instr de assembler o solo para las OPER?

- ¿Cómo podemos probar las cosas relacionadas con los grafos?

- En la función munchStm, cuando procesa un CALL (NAME name, ...), el datatype que generamos es un OPER, donde fijamos "jump = SOME [name]", 
  pero en el libro esta como "jump = NONE" . ¿Cuál es la correcta?.

- A la hora de crear el grafo de flujo, sabemos que si llegamos a una instrucción X con un jump a Y, tenemos que crear una arista entre el
  nodo X y el nodo de la proxima instrucción a Y. Pero, ¿qué pasa si la instrucción se corresponde a un CJUMP?. Creemos que en este caso deberiamos
  hacer no solo la arista a la proxima instrucción del label, sino tambien una arista entre la proxima instrucción al CJUMP.

- Nosotros generamos una instrucción utilizando el constructor MOVE solo cuando se transfiere datos de un temporario a otro.
  ¿Así está bien?

- ¿Podemos llenar el campo "dst" de una instrucción, tanto en la función muchExp como muchStm?
  Por ejemplo, queremos hacer:
  munchStm (T.MOVE (TEMP i) e2) = emit (MOVE {src = [muchExp e2], dst=[i], ..})
  ¿Está bien?. 
  Nosotros creiamos que como un statement no devuelve un valor, no debia utilizarse el campo "dst" de la instrucción asociada.

- En el chequeo de tipos, ¿deberiamos capturar la excepción Ciclo, y mostrar un error más detallado?.

- ¿Esta bien mantener dos levels donde el nombre del frame sea "_tigermain", en la pila de levels (uno viene por defecto, al crear la pila)?.

- ¿Podemos definir en tiger una función de nombre "_tigermain"?. NO, no es posible que el nombre de una función comience con guión bajo,
  da syntax error.

- A nosotros no nos importa el orden con el cual se declaran los miembros de un record, está bien?. Según la pág. 518 del libro, SI importa.

- ¿Por qué la alocación de un record en memoria ocurre en el orden inverso al declarado? (No hay problema al recorrerlo, sólo nos llama la atención
  que se haga todo en orden inverso)


Selección de instrucciones y Livennes
-------------------------------------

- En el caso "EXP e" de munchStm consideramos que la instrucción generada es vacia (el campo assem = ""), ¿Está bien? ¿Es necesario este caso?

- ¿Como deberíamos implementar procEntryExit2?. A que se refiere con: "indica al register allocator que ciertos registros se mantienen vivos 
  en la salida de la función".

- Está bien hacer que los campos "use" y "def" de un grafo de flujo, sean conjuntos (en el libro, son listas)?.

- En el libro, páginas 225 y 226, plantea un caso particular en el que puede definirse una variable que luego no se utiliza. Menciona que
  interfiere con aquellas variable cuyo rango de vida se solape con el rango de vida de esta variable (rango nulo).
  ¿Me podrías plantear un caso en el que se dé esta situación?
  ¿Como deberíamos tratarlo, si es necesario?

- Nosotros calculamos los liveouts para cada instrucción (liveMap), pero en la función Build (del pseudo-código de coloreo) inicia calculando 
  los liveouts de un bloque  de instrucciones, "liveOut (bloque)", y lo guarda en una variable llamada "live". ¿A qué se refiere "liveOut(bloque)" ?.
  Creemos que serían los temporarios que quedan vivos al finalizar el bloque. Ya que en el libro no explica como se calcula, ¿podemos adaptar 
  el pseudo-código para usar liveMap?.

- Una de las sentencias de Build agrega a la variable "live" los def(Instr), esto provoca que luego se generen bucles en el grafo de interferencias
  sobre los nodos que se corresponden a los temporarios de def. ¿Esta bien que suceda ésto?.


 Coloreo
 --------

- En la función "simpleregalloc", la variable "precolored", ¿se refiere a los registros de la arquitectura?. 
  ¿A qué se refiere la variable "asignables"? ¿Son aquellos registros que se pueden utilizar para colorear?.
  ¿La cantidad de colores K sería la cantidad de registros asignables?.

- La función "simpleregalloc" que está en el archivo tigersimpleregalloc.sml (en entrega3, lo adjunto), hace un coloreo y reescritura de la
  instrucciones "básico", ¿verdad?.
  Vale la pena que lo adaptemos a nuestra arquitectura para ir probando lo que hicimos, antes de terminar de implementar el coloreo recomendado en el libro?.

- ¿Los registros "asignables" son los registros de propósito general?. En nuestro caso tenemos:
  Total de registros = ["r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","r10",lr,fp, sp, pc]
  Asignables = ["r4","r5","r6","r7","r8","r9","r10"]

  Nosotros excluimos de los registros asignables aquellos que tienen un proposito especifico, por ejemplo r0 es el valor de retorno o el primer arg.
  En caso de no ser correcto el razonamiento anterior, ¿Qué razonamiento debemos seguir para encontrar los registros asignables?

- Si ponemos al registro lr como callee save, en procEntryExit1 agregamos las instrucciones move tn lr y move pc tn, antes y después del cuerpo de la
  función respectivamente, se genera un Segmentation Fault, lo cual se corrige si quitamos lo anterior y ponemos en el prólogo y epílogo push lr y pop pc.
  ¿Por qué se da esta situación?

- ¿Mantenemos el nombre de "_tigermain" para la función principal?

- ¿Es correcto que el usuario pueda definir una función F con el mismo nombre que una función de biblioteca?. En este caso, F "pisa" a la función de la
  biblioteca.
  Ver ejemploFinal16.tig

- Si creamos un array de records, lo inicializamos con un record determinado y luego modificamos algún elemento
  del array, vemos que todos sus elementos reflejan esta modificación. ¿Es correcto este funcionamiento?.
  Creemos que sí, por que el array es inicializado con una referencia a un record. Ver ejemploFinal22.tig.

- ¿Para que está la función "exit" de tiger?. ¿Podemos saber cual es el código exit de una función?

- Hay que definir lr como un source para la instrucción que se genera a partir del CALL?
  Esto lo haríamos para que cuando se genere el grafo de interferencia sea tenido en cuenta.

- Si c es spileado, el siguiente código
    c <- r3
    .
    .
    .
    r4 <- c
  se reescribe como
    c1 <- r3
    str c1, [fp,offset]
    .
    .
    .
    ldr c2, [fp,offset]
    r4 <- c2
  ¿Es necesario crear c1 y c2? ¿No se puede reescribir usando solo un temporario nuevo o mejor aún, usando c?
  No se puede usar un solo temporario ya que se perdería el beneficio de que se acorten los rangos de vida de
  los temporarios utilizados

- ¿Es necesario, luego de finalizar la etapa de reescritura, volver todas las estructuras que utiliza el coloreo
  a su estado original?

- Nos topamos con un problema: asegurarnos de que ciertos registros mantendran su valor luego de una llamada a función.
  Sea C el conjunto de registros de nuestra arquitectura (ARM). 
  Si C = A union B, donde B es el conjunto de registros callee saves,
  y A es el conjunto de registros que NO son callee saves.
  Consideremos el siguiente escenario.

  add r3, r3, r4         <----- Supongamos r3 = 10
  .
  .
  bl f
  mov r5, r3

  Pueden pasar varias cosas:
  1. Si la función f NO es una función de runtime (la definimos nosotros), y r3 es un registro en A,
     entonces NO podemos asegurar que r5 valga 10
  2. Si la función f NO es una función de runtime, y r3 es un registro en B,
     entonces podemos asegurar que r5 vale 10
  3. Si la función f es una función de runtime, y r3 es un registro cualquiera,
     entonces NO podemos asegurar que r5 valga 10.

  ¿Como podemos asegurarnos que r3 no cambie luego de que se llama a una función?.
  Una opción es poner a todo el conjunto C como callee save, pero las funciones del runtime no van a respetar esta convención.
  Otra, es poner el mayor numero posible de registros en la lista "calldef" (nosotros solo tenemos "calldef = [rv]").
  Es decir que, se puede hacer practicamente todo C como componente destino de una instrucción Call, así el coloreo resolvería el problema.

- Hola Guillermo, descubrimos que es lo que nos está trabando en el coloreo.
  El libro nos recomienda que para los registros callee saves, creemos MOVs a temporarios frescos en el código intermedio,
  así el coloreo se encargaría de mandarlos o no a memoria.
  Lo hacemos, y pasa lo siguiente:
  Supongamos que r4 y r5 son los registros callee saves. Y los registros disponibles para el coloreo son [r0 .. r5]

  Reescritura 0:

  t10 <- r4
  t11 <- r5
  .
  .
  .
  r4 <- t10
  r5 <- t11

  Se espilea t10.

  Reescritura 1:

  t20 <- r4
  M[dir] <- t20
  t11 <- r5
  .
  .
  .
  t21 <- M[dir]
  t4 <- t21
  r5 <- t11

  Se espilea t20.

  Y en cada iteración se va espileando el temporario que se creo en la etapa anterior para la reescritura.
  El coloreo no avanza, se queda atascado en el principio.
  No sabemos como solucionarlo.
  Sabemos que estamos haciendo bien el cálculo de los live out. La elección de los registros a espilear tiene sentido.
  En la "Reescritura 0", t10 interfiere con todos los registros coloreables salvo r4, pero cuando se le quiere asignar un color,
  uno de sus vecinos en el grafo de interferencia ya está coloreado con r4, asi que se lo espilea.
  ¿Qué estamos haciendo mal?. Nos parecio raro que t10 interfiera con r5, pero sabemos que está bien.
  Se nos ocurrio que podriamos hacer un coloreo en dos etapas, en una coloreamos el código sin el prologo y epilogo
  de los callee saves, y en la otra coloreamos el resultado de la etapa anterior con el prologo y epilogo de los
  callee saves, ¿funcionara?.


Dudas 2018:

- ¿Debemos chequear si el usuario ingresó una constante mas gránde que entero máximo o mas chico que el mínimo?
  Si usamos una constante más grande que el máximo (o mas chica que el mínimo) detectamos 2 casos:
    - La constante excede la cota por poco, gcc no falla pero el funcionamiento no es correcto
    - La constante excede por mucho, gcc falla

- En el ejemplo test06Modif.tig se genera una función recursiva infinita que dá un segmentation fault.
  Creemos que ésto se dá porque se generan frames hasta que se queda sin memoria para asignar y da error.
  Hicimos en C una función que se llama a si misma para que nunca termine y falla de la misma manera.
  ¿Es correcto este comportamiento?. ADDDDDDDDDJUNTAR ARCHIVO

- Al hacer el compilador con ARM como arquitectura destino y desarrollarlo en x86_64,
  no podemos implementar lo que sugiere el libro en el capítulo 12 en el título "Making it work", con un solo
  solo script, ya que por un lado generamos el prog.s (en la computadora donde programamos) y por otro
  generamos el ejecutable, linkeandolo con runtime.c, en una máquina virtual que tiene ARM como arquitectura
  (la cual corre en el DCC).
  Sin embargo, podríamos instalar mosml en la máquina virtual y lo anterior se puede hacer en un paso.
  ¿Los docentes prefieren que hagamos esto último o podemos dejarlo como lo hacemos actualmente
  (como se explicó en el párrafo anterior)?


HACER:
- Ver los Warnings cuando hacemos make.
- Probar el compilador en otras computadoras (en particular en alguna del DCC).


LO HECHO:
- Funciona el intérprete agregandole el prefijo a los labels de funciones.
- Modificamos el interprete para que respete el allocArray de C.
- Arreglado el almacenamiento de strings en el interprete.
- Modificamos getstrFun para que tome de a un char (antes tomaba toda una línea y por esto no funcionaba el ejemplo del merge).
- Testeado el array.
- Seteado correctamente los registros fv, sp, etc.
- Controlamos todos los test usando el intérprete.
- Terminar llamada a función para assembler en tigercodegen.sml.
- Hecho caso para el NAME en munchExp (puede llegar este caso cuando hay una string).
- Hechos los casos de BINOP para las demás operaciones (MINUS, MUL, DIV, etc.).
- Agregar los casos de error para tener los matching completos del munch.
- Terminada función "format" de codegen.sml.
- Arreglar munchArgs. Guardar correctamente los argumentos que van a memoria (usar push).
- Terminar el código que guarda y restaura los callee saves. Arreglar el ejemplo "testMultipleArgs.tig".
- Terminado selección de instruciones.
- Terminado tigergraph.sml
- Haciendo del gráfico de interferencias.
- Adaptar el coloreo echo por Guido.
- Probar un ejemplo en la máquina virtualizada.
- Hacer que las etiquetas de funciones esten antes de su preludio.
- Cuando se genera el código con "test123Modif.tig", se hace "ldr r10, = ". Controlar y arreglar
- Los frames colisionan (al menos con funciones recursivas). NO estamos "reservando" espacio para los locals.
- Arreglar "ejemploFinal8.tig"
- ¿Por qué aparece "Result: 10" en ejemploFinal12.tig?. Por que "print" retorna el valor cero.
- Implementar la división.
- Lograr que funcione la división para números negativos.
- Ver ejemploFinal20.tig y ejemploFinal21.tig.
- Ver ejemploFinal26.tig
- Chequear el ejemploFinal6.tig, problemas en la función factorial.
- Debugeando el coloreo, chequear la construcción del grafo de flujo e interferencia.
- Hacer una función heuristica para el spileo.
- Chequear que calldefs este bien definido.
- Arreglar el entero máximo y mínimo. Ver línea 347 de tigertrans.sml
- Arreglar flag "canon" e "inter", en tigermain.
- Chequéo de todos los ejemplos good.
- Chequear el archivo de dudas en general para ver si hay algo que no hallamos resuelto.
- Hacer que tiger_compiler.sh maneje los errores (si el código tiger tiene error, mostrarlo
  por salida estandar).
- Probar los ejemplos finales.


OBSERVACIÓN
- Tener en cuenta que la instrucción "bl" requiere agregar dos instrucciones al término del body de la función a la que se salta.

- En el coloreo de Guido, NO puede suceder lo siguiente:
  r9 <- 4
  t0 <- 10 (donde t0 puede ser coloreado con r9)
  t1 <- r9 <------------- ¿Qué valor tiene r9? ¿r9 == 4 ó r9 == 10?
  Pues nosotros NO "usamos" a r9.

- Por alguna razón el código:

  push {r0,r2}
  mov r0, r2
  bl printf
  pop {r0,r2}

  Modifica el registro r1, en el archivo "ejemploFinal8.s".
  Se arregla haciendo en su lugar:

  push {r0,r1,r2}
  mov r0, r2
  bl printf
  pop {r0,r1,r2}

  Conclusión: Al existir la posibilidad de que printf use r1 y nosotros no hacer push r1
              y luego pop r1, es probable que r1 se sobreescriba. Actualmente en vez de llamar
              a prinft directamente, hacemos uso del print (del runtime) por medio del CALL.
              Problemas como este se solucionan ya que incluimos los argregs en el campo dst del CALL, 
              lo que hace que estos registros esten "vivos" al final de la instrucción,
              y por lo tanto no se puedan usar para colorear.


- Código del build:
  - En primer lugar aclaramos que no se sigue al pie de la letra el pseudocódigo del libro ya que
    al realizar de distinta manera el cálculo de los liveOuts (básicamente calcularlos previamente
    y no al mismo tiempo que se arma el grafo de interferencia) hay ciertas partes que no son tenidas
    en cuenta.
  - Por otro lado, si en la instrucción actual i se define un temporario t que luego no es utilizado
    aún así interfiere con sus temporarios liveOuts (ver último párrafo de la página 225).

- Consideramos que los regístros r0, r1, r2 y r3 NO son registros asignables para el coloreo, pues NO se guarda
  su valor como los callee saves al entrar en una función, dando lugar a que al salir de la misma cambien su valor.

- Para la parte de coloreo tuvimos que buscar una forma para tener uno de los registros callee save "disponible".
  Elegimos a r4. En ejemploFinal23.tig, sucedia lo siguiente:

  Reescritura 0:

  mov t10, r4
  mov t9, r5
  ...

  Se espilea t10.
  
  Reescritura 1:

  mov T63, r4
  movw T64, #:lower16:-8
  movt T64, #:upper16:-8
  str T63, [fp,T64]
  mov T9, r5
  ...

  Antes de esta modificación, t64 se espileaba en la Reescritura 1, pues no habia temporarios disponibles
  para colorearlo. Con lo cual se entraba en un ciclo, donde siempre se espileaba el temporario generado por la
  reescritura de la iteración anterior. Pero con esta modificación, esto se soluciona, t64 puede colorearse con r4.

  Ésto es necesario para ARM ya que cada vez que se espilea un temporario, en la reescritura, se crean 2 nuevos temporarios.
  Es posible colorear el 1º (T63) pero el problema persiste con el 2º (T64).
  Para lograr ésto lo que se hizo fue agregar a la parte del preludio y epilogo (mediante push y pop) el registro r4 
  y se dejó de hacer el move correspondiente en la parte de los callee save. 
  Hay que tener en cuenta que al agregar r4 como un push fijo se modifica el frame, y por lo tanto es necesario hacer 
  algunas modificaciones en el código de tigerframe.