/* define valid recursive types */

let
  /* define a tree */
  type tree ={key : int, children : treelist}
  type treelist = {hd : tree, tl : treelist}

  function printint (i : int) =
   let function f (i : int) =
     if i > 0
     then (f (i/10); print (chr (i-i/10*10+ord ("0"))))
   in if i < 0 then (print ("-"); f (-i))
      else if i>0 then f (i)
           else print ("0")
  end

  var hoja1 := tree {key = 3004, children = nil}
  var hoja2 := tree {key = 6996, children = nil}
  var t : tree := tree {key = -34, children = treelist {hd = hoja1, tl = treelist {hd = hoja2, tl = nil}}}

in
 printint((t.children.hd.key/-33 + t.children.tl.hd.key*-5)/4)
end
